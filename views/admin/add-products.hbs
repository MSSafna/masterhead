<style>
    .g-height-50 {
        height: 50px;
    }

    .g-width-50 {
        width: 50px !important;
    }

    @media (min-width: 0) {
        .g-pa-30 {
            padding: 2.14286rem !important;
        }
    }

    .g-bg-secondary {
        background-color: #fafafa !important;
    }

    .u-shadow-v18 {
        box-shadow: 0 5px 10px -6px rgba(0, 0, 0, 0.15);
    }

    .g-color-gray-dark-v4 {
        color: #777 !important;
    }

    .g-font-size-12 {
        font-size: 0.85714rem !important;
    }

    .media-comment {
        margin-top: 20px
    }

    .singleImageCanvasContainer {
        overflow: hidden;
        height: 350px;
        width: 30%;
        display: inline-block;
        position: relative;
        padding-right: 0px;
        margin-right: 15px;
        border: 2px solid #dfdfdf;
        margin-bottom: 10px;
        padding: 4px;
        border-radius: .25rem;
    }

    .singleImageCanvasContainer .singleImageCanvasCloseBtn {
        position: absolute;
        right: 0;
    }

    .singleImageCanvasContainer .singleImageCanvas {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>
<main id="main" class="main">
<section>
    <div class="container mt-5">
        <div class="col-md-6 ">
            <h2>Add products</h2>
            <form action="/admin/addproduct" method="post" id="something" enctype="multipart/form-data" onsubmit="return check()">
                {{!-- <label for="">name</label> --}}
                <input type="text" name="name" class="form-control" id="name" onkeyup="validatename()" placeholder="name">
                <span id="Name" class="text-danger"></span>
                  <br>
               
                 <select name="brand" id="changestatus" style="width:100%;height: 30px;border-radius:5px;border-color:rgb(209, 200, 200);"  >
                   
                    <option value="" disabled selected >brand</option>
                     {{#each response}}
                  <option value="{{this._id}}">{{this.brand}}</option>
                   {{/each}}
                 </select>
                <br>
                <br>

                {{!-- <label for="">price</label> --}}
                <input type="number" name="price" class="form-control" id="price" onkeyup="validateprice()" placeholder="price">
                 <span id="Price" class="text-danger"></span>
                 <br>

                {{!-- <label for="">discription</label> --}}
                <input type="text" name="discription" class="form-control" id="discription" style="height: 150px;" onkeyup=" validatediscription()" placeholder="discription">
                  <span id="Discription" class="text-danger"></span>
                   <br>
                {{!-- <label for="">stock</label> --}}
                    <input type="tel" name="stock" class="form-control" id="stock" onkeyup="validatestock()" placeholder="stock">
                  <span id="Stock" class="text-danger"></span>
                    <br>
                {{!-- <label for="">image</label> --}}
                {{!-- <input type="file"  class="form-control" name="image" placeholder="image"> --}}
                 {{!-- <input type="file" class="" name="image" id="gallery-photo-add" multiple required> --}}


                 <div class="form-outline mb-4">
            {{!-- <input type="password" id="registerPassword" name="Password" class="form-control" /> --}}
            <label class="form-label" for="id_image">Image</label>
            <span id="croppedImages"></span>
            
            <input type="file" class="form-control" id="id_image" name="image" data-toggle="modal"
                data-target="#exampleModal" accept="image/*" multiple>
        </div>

                <button type="submit" class="btn btn-success mt-4">Submit</button>
                <input type="button" value="Back" onclick="history.go(-1)" class="btn btn-primary "
                    style="margin-top: 25px;margin-left: 10px;">
            </form>
        </div>
    </div>
    </section>
  </main>
  <!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group row" id="test">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Save changes</button>
            </div>
        </div>
    </div>
</div>

    <script>
        let errName=document.getElementById('Name');
         let errPrice=document.getElementById('Price');
          let errDiscription=document.getElementById('Discription');
           let errStock=document.getElementById('Stock');


        function validatename(){
         var name=document.getElementById('name').value
          if (name == "") {
            errName.innerHTML = 'Enter product Name'
            return false
        }
        if (!name.match(/^[a-zA-Z0-9 ]*$/)) {
           
            return false
        }
         if (name.match(/^[ ]*$/)) {
            errName.innerHTML = 'enter a valid name'
            return false
        }
        errorName.innerHTML = null
        return true
        }


        function  validateprice(){
          var price=document.getElementById('price').value
          if(price==""){
            errPrice.innerHTML="enter price"
            return false
          }
          if(price==(/^[A-Z]+$/i)){
            errPrice.innerHTML='enter a valid price'
            return false
          }
          errPrice.innerHTML=null
            return true

        }

        function validatediscription(){
            var discription=document.getElementById('discription').value
            if(discription=""){
              errDiscription.innerHTML="enter discription"
              return false
            }
            errDiscription.innerHTML=null
            return true
        }

     function validatestock(){
        var stock=document.getElementById('stock').value
        if(stock==""){
            errStock.innerHTML='enter stock'
            return false
        }
        if(stock==(/^[A-Z]+$/i)){
            errStock.innerHTML='enter a valid stock'
            return false
        }
        errStock.innerHTML=null
        return true
     }

       function check(){
          
              let validatearray =[!validatename() , !validateprice() , !validatestock() , !validatediscription() ]
             
              return validatearray.every(validation)
              

        }   

        function validation() {
      
        if (!validatename() || !validateprie() || !validatestock() || !validatediscription() ) {
            return false
        }
        return true
    }  
        

    </script>


    <script>
    const input = document.getElementById('id_image')
    const test = document.getElementById('test')
    input.addEventListener('change', () => {
        // Getting image file object from the input variable
        const img_data = []
        const imagebox = []
        const crop_btn = []
        const confirm_btn = []
        const url = []
        const length= input.files.length
        for (i = 0; i < length; i++) {
            test.innerHTML += `<div class="col-4"><div id="image-box${i}" class="image-container" style="height: 350px; width: 350px;"> </div>
    <button class="btn btn-outline-info" id="crop-btn${i}" style="width: 100%; margin-top: 10px; display: block;" type="button">Crop</button> </div>`
        }
        for (i = 0; i < length; i++) {
            img_data[i] = input.files[i]
        }
        
        img_data.forEach((image_data, i) => {
            url[i] = URL.createObjectURL(image_data)
        })
        // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
        // The new object URL represents the specified File object or Blob object.
        url.forEach((url,i)=>{
            document.getElementById('image-box'+i).innerHTML = `<img src="${url}" id="image${i}" style="width:100%;">`
        })
        
        // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.

        // Storing that cropping view image in a variable
  

        // Displaying the image box
        for(i=0;i<length;i++){
            document.getElementById('image-box'+i).style.display= 'block'
             document.getElementById('crop-btn'+i).style.display= 'block'
        }
       

        for(i=0;i<length;i++){
            cropper(img_data[i],document.getElementById('image'+i),i,document.getElementById('crop-btn'+i),document.getElementById('image-box'+i))
        }

        

        // Creating a croper object with the cropping view image
        // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
        // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
        let container = new DataTransfer();
        let fileInputElement = document.getElementById('id_image');



        function cropper(img_data, image, index, crop_btn, imagebox) {

            const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                minCropBoxWidth: 50,
                minCropBoxHeight: 50,
            })

            // When crop button is clicked this event will get triggered
            crop_btn.addEventListener('click', () => {
                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {

                    // Gets the original image data
                    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                    let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                    // Create a new container

                    // Add the cropped image file to the container
                    container.items.add(file);

                    fileInputElement.files = container.files

                    // Replace the original image file with the new cropped image file



                    // Hide the cropper box
                    imagebox.style.display = 'none'
                    // Hide the crop button
                    crop_btn.style.display = 'none'
                });
            });
        }
    });
</script>